plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
}
apply from: rootProject.file('jacoco_report.gradle')

import com.a.coco.instrument.CocoInstrumentPlugin
import com.a.coco.backup.CocoBackupPlugin

apply plugin: CocoInstrumentPlugin
cocoInstrument {
    enable = true
    unSupportVariants = ["onlineRelease"]
    includes = ["com.a.*"]
}

// ./gradlew dailyDebugCocoBackup  --toDir==/Users/canglong/Documents/github_project/Android-Jacoco-Demo-builds  --buildNum=100
apply plugin: CocoBackupPlugin
cocoBackup {
    excludeModules = ["plugin", "report", "rt-no-op"]
}

android {
    namespace 'com.a.jacocotest'
    compileSdk 33

    // ./gradlew installDailyDebug  -PjenkinsBuildNum=200
    def buildNum = projectPropertyOf("jenkinsBuildNum", "0")

    defaultConfig {
        applicationId "com.a.jacocotest"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [
                test_meta        : "test",
                jenkins_build_num: buildNum,
        ]
    }


}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.1'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0"
//    implementation project(":lib")
    implementation project(":other")
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

//    onlineApi project(path: ':rt-no-op')
//    ['daily', 'gray'].each {
//        "${it}Api" project(path: ':rt')
//    }
    api project(path: ':rt')
}

String projectPropertyOf(String key, String defValue) {
    return project.hasProperty(key) ? project.property(key).toString() : defValue
}